/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_autocomplete_init_autocomplete__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/autocomplete/init-autocomplete */ "./js/modules/autocomplete/init-autocomplete.js");
// import {iosVhFix} from './utils/ios-vh-fix';
// import {initCustomSelect} from './modules/form/init-custom-select';
// import {initFormValidate} from './modules/form/init-form-validate';
 // ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------
  // iosVhFix();
  // Modules
  // ---------------------------------
  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {
    // initCustomSelect();
    // initFormValidate();
    Object(_modules_autocomplete_init_autocomplete__WEBPACK_IMPORTED_MODULE_0__["initAutocomplete"])();
  });
}); // ---------------------------------
// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.
// привязывайте js не на классы, а на дата атрибуты (data-validate)
// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅
// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.
// для адаптивного JS используейтся matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();
// используйте .closest(el)

/***/ }),

/***/ "./js/modules/autocomplete/autocomplete.js":
/*!*************************************************!*\
  !*** ./js/modules/autocomplete/autocomplete.js ***!
  \*************************************************/
/*! exports provided: Autocomplete */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Autocomplete", function() { return Autocomplete; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Autocomplete = /*#__PURE__*/function () {
  function Autocomplete(container, callback) {
    _classCallCheck(this, Autocomplete);

    this._container = container;
    this._callback = callback;
    this._inputElement = this._container.querySelector('input');
    this._autocompleteMenuElement = null;
    this._optionListElement = null;
    this._selectedListElement = null;
    this._selectedCountBtn = null;
    this._errorMessage = this._container.dataset.errorMsg;
    this._autocompleteData = []; // оригинальные данные

    this._autocompleteDataCopy = []; // массив для преобразования данных, содержит элементы кроме выбранных

    this._selectedItems = []; // массив выбранных элементов

    this._matchesItemData = []; // массив совпадений среди _autocompleteDataCopy

    this._hasMultiOptions = this._container.hasAttribute('data-multi-options');
    this._onInputHandler = this._debouceInput(this._onInputHandler.bind(this), 200);
    this._onClickHandler = this._onClickHandler.bind(this);
    this._onLoadDataHandler = this._onLoadDataHandler.bind(this);

    this._init();
  }

  _createClass(Autocomplete, [{
    key: "_init",
    value: function _init() {
      this._callback();

      this._container.addEventListener('loadDataSuccess', this._onLoadDataHandler);
    }
  }, {
    key: "_onLoadDataHandler",
    value: function _onLoadDataHandler() {
      this._createMenu();

      if (this._hasMultiOptions) {
        this._updateSelectedCountBtn();
      }

      this._inputElement.addEventListener('input', this._onInputHandler);

      this._inputElement.addEventListener('keydown', this._onInputKeydown);

      this._container.addEventListener('click', this._onClickHandler);
    }
  }, {
    key: "_debouceInput",
    value: function _debouceInput(func, timeout) {
      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
      var timer;
      return function () {
        var _arguments = arguments,
            _this = this;

        context._autocompleteMenuElement.classList.remove('is-missing');

        context._container.classList.add('has-loader');

        var callback = function callback() {
          // eslint-disable-next-line
          func.apply(_this, _arguments);
        };

        context._optionListElement.innerHTML = ''; // обновляем элемент при новом вводе

        context._matchesItemData = []; // обновляем массив совпадений при новом вводе

        context._showOptionList(false);

        clearTimeout(timer);
        timer = setTimeout(callback, timeout);
      };
    } // общий контейнер выпадашки

  }, {
    key: "_createMenu",
    value: function _createMenu() {
      this._autocompleteMenuElement = document.createElement('div');

      this._autocompleteMenuElement.classList.add('autocomplete-menu');

      this._createOptionList();

      if (this._hasMultiOptions) {
        this._inputElement.insertAdjacentHTML('afterend', this._createSelectCountBtn());

        this._createSelectedList();
      }

      this._createErrorMsg();

      this._container.append(this._autocompleteMenuElement);
    } // Список предлагаемых вариантов

  }, {
    key: "_createOptionList",
    value: function _createOptionList() {
      this._optionListElement = document.createElement('ul');

      this._optionListElement.classList.add('autocomplete-menu__list');

      this._optionListElement.classList.add('autocomplete-menu__list--options');

      this._autocompleteMenuElement.append(this._optionListElement);
    } // Список выбранных вариантов

  }, {
    key: "_createSelectedList",
    value: function _createSelectedList() {
      this._selectedListElement = document.createElement('ul');

      this._selectedListElement.classList.add('autocomplete-menu__list');

      this._selectedListElement.classList.add('autocomplete-menu__list--selected');

      this._autocompleteMenuElement.append(this._selectedListElement);
    } // Создание элемента списка на основе данных

  }, {
    key: "_createOption",
    value: function _createOption(data) {
      var selectedOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var item = document.createElement('li');
      item.classList.add('autocomplete-menu__item');
      item.setAttribute('data-option-id', data.id);
      item.setAttribute('data-option-value', data.title);
      var labelHead = document.createElement('span');
      var labelValue = document.createElement('span');
      labelHead.classList.add('autocomplete-menu__head-label');
      labelValue.classList.add('autocomplete-menu__value');
      labelHead.textContent = 'улица';
      labelValue.textContent = data.title;
      item.append(labelHead);
      item.append(labelValue);

      if (!selectedOption) {
        item.setAttribute('tabIndex', '0');

        this._optionListElement.append(item);
      } else {
        item.insertAdjacentHTML('beforeend', this._createDeleteItemBtn());

        this._selectedListElement.append(item);
      }

      return item;
    } // Кнопка удаление выбранного варианта

  }, {
    key: "_createDeleteItemBtn",
    value: function _createDeleteItemBtn() {
      return "\n      <button class=\"autocomplete-menu__btn-delete\" type=\"button\">\n        <span class=\"visually-hidden\">\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0432\u0430\u0440\u0438\u0430\u043D\u0442</span>\n        <svg class=\"btn__icon\" width=\"16\" height=\"16\" aria-hidden=\"true\">\n          <use xlink:href=\"#icon-close\"></use>\n        </svg>\n      </button>\n    ";
    } // Кнопка счетчик на инпуте

  }, {
    key: "_createSelectCountBtn",
    value: function _createSelectCountBtn() {
      return "\n      <button class=\"btn custom-input__selected-btn\" type=\"button\">\n        <span class=\"btn__text counter\">777</span>\n      </button>\n    ";
    } // Сообщение о ошибке поиска совпадений

  }, {
    key: "_createErrorMsg",
    value: function _createErrorMsg() {
      var messageStr = this._errorMessage ? this._errorMessage : 'Похожих запросов не найдено.';

      if (this._errorMessage) {
        this._container.removeAttribute('data-error-msg');
      }

      var message = document.createElement('p');
      message.classList.add('autocomplete-menu__error');
      message.textContent = messageStr;

      this._autocompleteMenuElement.append(message);
    } // Обновление кнопки счетчика по которой вызывается список выбранного

  }, {
    key: "_updateSelectedCountBtn",
    value: function _updateSelectedCountBtn() {
      this._selectedCountBtn = this._container.querySelector('.custom-input__selected-btn');

      if (this._selectedItems.length === 0) {
        this._container.classList.remove('has-counter-btn');
      } else {
        this._container.classList.add('has-counter-btn');
      }

      var countElement = this._selectedCountBtn.querySelector('.counter');

      countElement.textContent = this._selectedItems.length;
    } // Поиск совпадений по вводу в массиве данных

  }, {
    key: "_searchInData",
    value: function _searchInData() {
      var what = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var where = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return where.toLowerCase().search(what.toLowerCase());
    } // Показ окна с предлагаемыми вариантами

  }, {
    key: "_showOptionList",
    value: function _showOptionList() {
      var active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (!active) {
        this._autocompleteMenuElement.classList.remove('is-active-options');

        return;
      }

      this._autocompleteMenuElement.classList.add('is-active-options');

      this._container.classList.remove('has-loader');

      this._autocompleteMenuElement.classList.remove('is-missing');
    } // Ввод осуществляется через debounce 200ms

  }, {
    key: "_onInputHandler",
    value: function _onInputHandler() {
      var _this2 = this;

      if (!this._inputElement.value) {
        this._showOptionList(false);

        this._autocompleteMenuElement.classList.remove('is-missing');

        this._container.classList.remove('has-loader');

        return;
      }

      this._optionListElement.innerHTML = ''; // обновляем элемент при новом вводе

      this._matchesItemData = []; // обновляем массив совпадений при новом вводе

      this._autocompleteDataCopy.forEach(function (dataItem) {
        var matches = _this2._searchInData(_this2._inputElement.value, dataItem.title);

        if (matches === -1) {
          _this2._autocompleteMenuElement.classList.add('is-missing');

          _this2._container.classList.remove('has-loader');

          return;
        }

        _this2._matchesItemData.push(dataItem);

        _this2._createOption(dataItem);
      });

      if (this._matchesItemData.length > 0) {
        this._showOptionList();
      } else {
        this._showOptionList(false);
      }
    }
  }, {
    key: "_onClickHandler",
    value: function _onClickHandler(evt) {
      var _this3 = this;

      var container = evt.target.closest('[data-autocomplete]');

      if (container) {
        var item = evt.target.closest('.autocomplete-menu__item');
        var deleteBtnSelectedItem = evt.target.closest('.autocomplete-menu__btn-delete');
        var selectedCountBtn = evt.target.closest('.custom-input__selected-btn'); // при мультивставке выбранных элементов в отдельный список

        if (this._hasMultiOptions) {
          if (item) {
            // клик по элементу списка предлагаемых вариантов
            if (item.closest('.autocomplete-menu__list--options')) {
              this._matchesItemData.forEach(function (dataItem) {
                if (Number(dataItem.id) === Number(item.dataset.optionId)) {
                  _this3._selectedItems.push(dataItem);

                  _this3._createOption(dataItem, true);

                  _this3._autocompleteDataCopy = _this3._autocompleteDataCopy.filter(function (it) {
                    return it.id !== dataItem.id;
                  });

                  _this3._updateSelectedCountBtn();
                }
              });

              this._inputElement.value = '';
            } // клик по элементу списка выбранных вариантов


            if (item.closest('.autocomplete-menu__list--selected')) {
              // клик по кнопке удаления варианта
              if (deleteBtnSelectedItem) {
                var itemToDelete = evt.target.closest('.autocomplete-menu__item');

                this._selectedItems.forEach(function (dataItem) {
                  if (Number(dataItem.id) === Number(item.dataset.optionId)) {
                    _this3._autocompleteDataCopy.push(dataItem);

                    _this3._selectedItems = _this3._selectedItems.filter(function (it) {
                      return it.id !== dataItem.id;
                    });
                    itemToDelete.remove();

                    _this3._updateSelectedCountBtn();
                  }
                });

                if (this._selectedItems.length === 0) {
                  this._autocompleteMenuElement.classList.remove('is-active-selected');
                }
              }
            }
          } // клик по кнопке счетчику для показа выбранных элементов


          if (selectedCountBtn) {
            if (this._autocompleteMenuElement.closest('.is-active-options')) {
              this._autocompleteMenuElement.classList.remove('is-active-options');
            }

            this._autocompleteMenuElement.classList.toggle('is-active-selected');
          }
        } else {
          if (item) {
            this._inputElement.value = item.dataset.optionValue;

            this._autocompleteMenuElement.classList.remove('is-active-options');
          }
        }
      }
    }
  }, {
    key: "reInit",
    value: function reInit() {
      this._autocompleteMenuElement.remove();

      this._init();
    }
  }]);

  return Autocomplete;
}();

/***/ }),

/***/ "./js/modules/autocomplete/init-autocomplete.js":
/*!******************************************************!*\
  !*** ./js/modules/autocomplete/init-autocomplete.js ***!
  \******************************************************/
/*! exports provided: initAutocomplete */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initAutocomplete", function() { return initAutocomplete; });
/* harmony import */ var _autocomplete__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./autocomplete */ "./js/modules/autocomplete/autocomplete.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var autocomplete = [];

var onDocumentHandler = function onDocumentHandler(evt) {
  var activeOptionList = document.querySelector('[data-autocomplete] .is-active-options');
  var activeSelectedList = document.querySelector('[data-autocomplete] .is-active-selected');
  var activeArroreMessage = document.querySelector('[data-autocomplete] .is-missing');
  var counterBtn = evt.target.closest('.custom-input__selected-btn');
  var deleteBtnSelectedItem = evt.target.closest('.autocomplete-menu__btn-delete');

  if (counterBtn) {
    return;
  }

  if (deleteBtnSelectedItem) {
    return;
  }

  if (activeOptionList) {
    activeOptionList.classList.remove('is-active-options');
  }

  if (activeSelectedList) {
    activeSelectedList.classList.remove('is-active-selected');
  }

  if (activeArroreMessage) {
    activeArroreMessage.classList.remove('is-missing');
  }
}; // Пример получения локального json через fetch, вся работа внутри, происходит с копией массива данных _autocompleteDataCopy
// при завершении обязательно должно быть вызвано событие loadData, для рендера элементов


var getData = function getData(context) {
  fetch('data/posts.json').then(function (res) {
    if (!res.ok) {
      throw new Error(res.status);
    }

    return res.json();
  }).then(function (data) {
    context._autocompleteData = data;
    context._autocompleteDataCopy = context._autocompleteData.slice();

    context._container.dispatchEvent(new CustomEvent('loadDataSuccess'));

    return data;
  });
}; // Добавьте свою коллбек-функцию и аттрибут (data-autocomplete-callback="custom") с её именем из объекта ниже, для элемента с data-autocomplete
// так же через коллбек можно изменить сообщение об ошибке поиска, просто передайте строку с ошибкой в this._errorMessage


var callbacks = {
  base: function base() {
    getData(this);
  },
  custom: function custom() {
    // добавить функцию получения данных
    console.log('Кастомный коллбек');
  }
}; // чтобы подкорректировать верстку элементов списков отредактируйте _createOption() в autocomplete.js

var initAutocomplete = function initAutocomplete() {
  var autocompleteElements = _toConsumableArray(document.querySelectorAll('[data-autocomplete]'));

  if (!autocompleteElements.length) {
    return;
  }

  var autocompleteEntities = autocompleteElements.map(function (it) {
    var callback = it.dataset.autocompleteCallback;

    if (!callback) {
      callback = 'base';
    }

    return new _autocomplete__WEBPACK_IMPORTED_MODULE_0__["Autocomplete"](it, callbacks[callback]);
  });
  autocompleteEntities.forEach(function (it) {
    return autocomplete.push(it);
  });
  document.addEventListener('click', onDocumentHandler);
  window.autocomplete = autocomplete;
};



/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map